git init
git add .
git commit -m "Initial commit"
git remote add origin <project url>
git push -f origin master


Persistent Angular 5-8 July

1. Angular2 
	a) Visual Studio Code : 
	b) node (Npm installer)
	c) git (to download seed projects)
	d) Bootstrap to decorate 
	e) We typicode for json 

2. Check your setup : 
	c:\> npm
		 node 
		 git 
	Check you visual studio code 
	And check Chrome Availibility 
	Check you Internet access 

3. 

import {Component} from '@angular/core';



@Component({
	selector : 'login', 
	templateUrl :  '<h1 (click)="clickme($event)" >xxxxxxxxx'
})
export clavalidateUser(): void{
		// 
		console.log("Validating")

	}

	clickme(event):void {

	}ss  LoginComponent {
	username:string = "username"; 
	password: number = ""; 	

	
} 


<login></login>


function LoginComponent(){
	constructor(helloService:HelloService)

}
import {Injectible} from '@angular/core'; 

@Injectible()
export class  HelloService {

	constructor (str1:string ){

	}


	getCities() : string[]{
		return ["Pune","Colombo","Goa"]
	}

	getCities() : string[]{
		return ["Pune","Colombo","Goa"]
	}

	getCities() : string[]{
		return ["Pune","Colombo","Goa"]
	}
	getCities() : string[]{
		return ["Pune","Colombo","Goa"]
	}
	getCities() : string[]{
		return ["Pune","Colombo","Goa"]
	}

	getCities() : string[]{
		return ["Pune","Colombo","Goa"]
	}
}

the idea of having this a service 

config {
	
	{
		path : 'home', 
		component : LOginComponent
	},

	{
		path : 'home', 
		component : LOginComponent
	}

	{
		path : 'home', 
		component : LOginComponent
	}

	{
		path : 'home', 
		component : LOginComponent
	}

	{
		path : 'home1', 
		component : TestComponent
	}

}


Router.forRoot(cinfig )
<root>
<menu></menu>
<router-outlet></router-outlet>
</root>



for any purspose of installing typescript 

npm and npm comes only with node

1. you will neeed to install node with which you will get 
	npm 

2.  npm install -g typescript 

3.  tsc --> typescript compile   
	brackets 
	sublime-text 
	atom 
	visual-studio code 

4. i will create simple ts file 
interface IWelcome {
    print();
}

export class Welcome implements IWelcome{
    storeName : string = "MyStore";
    username : string; 
    password : string; 
    print(){        
    }
    login ():number{
        return 1; 
    }
    logout(): boolean {
        return true; 
    }
    constructor(){
        console.log("Construtor of the Welome ");
    }
}

var w1 = new Welcome(); 
w1.print(); 
w1.login(); 
w1.logout();

Compile the ts : 
tsc -w  yourfile.ts (this is in watch mode ) 

make the changes to the file and you can see the changes 
get refelected 

How to test : 
	node yourfile.js 



Component ---> 

a) How do i login ?  
	how do authenticate users ? 



User----- > Server ---> Challenge ---> Input ---> Server --> 
	Authenticate --->  Store token (Session)==> Server Side ---> 
		---> Session Id (Cookied) Per Session Cookie to the client and the client would  on every request 
			send this information back to the server -> 
				server use some type verification .... 


Server Side doesn have session :- 
	Rest / Microservice --> 
		====> in each call i will need to send my details --> 


on the client ---> 
	sessionStorage 
	localStorage 


Server---> Session (HttpSession/AspSession/Server side stores )

are we using any of the following technologies 
	       a http :- 
	       	api / get /put/post /head /delete 
	       		http/https without having any state stored on the server
Rest .Net 
Rest .java 


microservices : 


setAttribute 
getAttribute on the servide 

Client Side Authentication ---> ----- > Authenticate myself 
generated a token ----> i would definitely need to store somewhere 

what about cache ? 


1. two places to storage 
	localStorage  (applicable only till the user using the browser )
	sessionStorage 
		as long as the browser is open ? 

2. how access i access this data : 
	LocalStorage  / LocalStorageService
	SessionStorage / SessionStorageService 


	npm  --save  install  Ng2Webstorage

	@LocalStorage()
	isLogged 

	@SessionStorage()
	isLogged 



3.  LoginService 
		---> SessionStorageService 
		---> LocalStorageService 

---> 



 MenuComponent (Should change is behaviour and state when ) 
 LoginComponent  (the user logins or logis )
 MoviesComponent (I want the movies that shown to me should be 
 					as per age and profile )
 		Where are my movies ?  ---> Remote (Fetch Them)

 Then i wish to use the The complete flow 
 	Routers 
 
 a) HttpModule 
 b) RouterModules 
 c) Ng2WebStorage 
 d) JsonpModule 
 e) rxjs
 f) FormsModule 
 g) ValidationsModule 



1. Trying to achieve the login Screen:- 
2. Trying to make my http work
3. Trying to make my links work  

--> LoginComponent--> LoginService-->Ng2WebStorage-->SessionStorage











































































git remote add origin https://github.com/nileshdevdas/imdb.git

import { Injectable } from '@angular/core'


How to write a componet 
import {Component} from '@angular/core'

@Component({
	selector: 
	template:
	providers:
	entryComponents:
})

export class ClassName{
	
}

How to write a Service 
import {Injectible} from '@angular/core';

@Injectible 
export class ServiceName {
	
	fn() : returnType{

	}
}

How to Write a Directive 

import {Directive, ElementRef, Renderer} from '@angular/core';
@Directive(
    {
        selector : '[autoGrow]',
        host : {
            '(focus)' : 'onFocus()', 
            '(blur)'  : 'onBlur()'
        }
    }
)
export class AutoGrowDirective {
    constructor(el:ElementRef , renderer:Renderer){
        console.log("Contructed");
    }

    onBlur(){   
            console.log("Blurred");
    }
    
    onFocus (){
            console.log("Focussed ");
    }
}


Style Binding 
[style.backgroundColor]='isActive?a:b'

Class Binding 
[class.active]="isActive"

Event Binding 
(click)
on-click	


ngIf 
ngSwitch
hidden
ngFor

pipes  for formatting Data 
uppercase 
lowercase 
number:'2.2-5'
currency : 'AUD':true:'2.2-2'
date : 'shortDate'
json 


Elvis Operators 
?

Contents 
INsertion Points 
ngContent
ng-content


HTTP
import {Http} from '@angular/http';
import {HttpModule,JsonpModule} from  '@angular/http';
@NgModule({
  imports:      [ BrowserModule,HttpModule ,JsonpModule],


<head>
  <base href="/">

import { RouterModule }   from '@angular/router';

path: the router matches this route's path to the URL in the browser address bar (home).
component: the component that the router should create when navigating to this route (AppComponent).

Router Outlet to display
router Link to create a link


Observable  use subsribe  
and Promise 
toPromise 
import rxjs/add/operator/map
import rxjs/add/operator/toPromise


1. --> index.html
			---> System.Config.js
				--->this creates a global configruation 
		--> i invoke the application bootstrap 
				main.js 
					--> AppModule--> app.module.ts/js 
							-->DomContentLoaded==> 
								my-app :-  app.component.ts


Steps to setup development Environment : 
a) You can download the angular-seed project 
	or git clone the project 

git clone https://github.com/angular/quickstart.git <yourproject>	
b)  npm i  (downloads the required node_moddules to run the project)

c)   npm start (starts the tsc -w in watchmode and a weblite server to server html pages over http )

d)  http://localhost:3000/ 




How to write my components : 
1.    Write  file   xxxxxx.component.ts (xxxxxx is your component 
		Name )
2.     import {Component} from '@angular/core'

3. 	   @Component({
			 selector : 'someSelector', 
			 template :  'someTemplate'
		})
4. 	   export class MyComponent {
			// properties 
			// functions 
		}
5.  Declare the component this in the app.module.ts
		import {MyComponent} from  './mycomponent.component.'
		declarations : [ ..... .. ,,,MyComponent]

6.  How to use the component 
	go into the app.component.ts : --> 
		and in the template section you can add the 
			someSelector tag specified above 
	  declarations: [ AppComponent, MyComponent],

Summary : 
1. what are Single Page Applications 
2. We saw what is angular 2 
	 components 
	 routers 
	 directives  
	 ...... 
3. What is type scripting and how type scripting in implementing 
	dom free javascript 

4. we saw how to setup an angular seed 

5. we saw the contents of the seed project and how bootstrap work 

6. How to write a sample component 

7. How run and test our applications 

8. How to setup our developement environment 

9. we saw how to use our component with other component 

json : 
arrays : 
rest : 
bootstrap : 
---------------------------------------------------------------
a) service
b) pipe 
c) menu
d) events


Recap Session:- 
1. We know angular2 
	





































https://github.com/nileshdevdas/angular2.git

1. How to use typescript 
2. how to use angular2 develop environment 
3. How to use angular2 with visual studio code 
4. angular 2 basic 
	  component / directives / routers / ... 
5. We saw how to build a component 
---------------------------------------------------------------

1. We are adding boot strap to our application 

2. we are developing some good menus 

3. we are going to use some structral directive 
	ngFor / ngSwitch / ngIf 

4. we are going to create our own directive 

5. we are going to create some more components 
	menu bar 
	login 
	movieDatatable 
6. We will write services 


7. we will use some inbuilt pipes 
	 uppercase/currency/percent/date/ and use formatting 

8. we will also write our own pipes 
	a pipe for filtering / ordering / and managing 
	custom scenarios 

9. event binding and two way bindings and understand how binding 
	works in angular2 

10. assembly of all the components together 

i am building a service because i want the menu to come from 
the back end service :- 

the menu --> call will aso user role/token 


() = event  (bind event)
[] = oneway  (Read data )
[()] = twoway (ngmodel) read/write
* = structral directive  *(ngFor/ngIf/ngSwitch)
xx = attribute   (attribute Directives)


ngSwitch
ngIf
pipes
http
routing


https://github.com/nileshdevdas/imdb.git



https://jsonplaceholder.typicode.com/


https://jsonplaceholder.typicode.com/photos


1. add httpModule and Jsonp module to app.module.ts 
2. add it to the imports of app.module.ts 
3. creata new service 
4. inmport Http/Response 
5. import rxjs/add/operation/map" 
6. import Observable 
7. create a class Post(optional )
8. in the contructor intialize the http variable 
	this.http = http (di )
9. write method getPosts: Observable<Post>()
	{
		return http.get('url').map(res => res.json());
	}
10. open app.component.ts 
	import the Service 
	provider additions 
11. now in the constructor call the service getPost(); 
	and set a local variable to it 

12. now in the template you can using this variable 
	and iterate the vway yout wish 

a) Components 
b) Directives 
c) Services 
d) Bootstraps 
e) Events 
f) Structural ngFor/ngIF 
g) Attribute Directive 
i) Custom Directive higligter 
j) Pipes 
k) how to make use sessionStorage/LocalStorage 
l) Dependency Injection 
m) Type Script 
n) Http Module   	
	Observable 
	toPromise(); 
	.map().toPromise() (Promise); 
o) Using external Module ng2WebStorage / BootStrap 
p) Used Event And Menus 
q) seeding a project 
r) system.config.js  package and mappings 
s) Forms Module (binding , ngModel, [()] = two way bding )
	() event binding 
	[]  property binding 
t) we have constructors, methods, properties, dynamic property 
	change 



1. Want you to write routers 
3. want you to write i c messaging
4. want you to write the NgZone 
2. Want you to write pipes 
5. want you to work on form validations 
6  # , elvis (variable)

Routers : 

RouterModule 
configuration of the router rule 
	/test ? where should i go what component i should render 
	Componet

const config = [ 
	{
		path : '', 
		component : NameOf theComponent
	}	

]

http://localhost:3000/
a) i have routerModule 
		RouterModule.forRoot(config); 

b) i have routerOutlet 
c) i have routerLink 
d) base href=""

index.html ==> 
	<my-app>	
			<mainmenu></mainmenu>
			<router-outlet></router-outlet>
			<footer></footer>
	</my-app>


	mainmenut.component.html 

		<a href="" router-link="">Home</a>
		<a href="" router-link="home">Home</a>
		<a href="" router-link="movies">Movies</a>
		<a href="" router-link="tv">TV</a>

It will chck with the Root Configuraiton of the Router 
	and based on teh pattern match decide what page to display 



import { RouterModule, Routes } from '@angular/router';
RouterModule.forRoot(routes)
const routes: Routes = [

    {
        path: '',
        component: LoginComponent
    },
    {
        path: 'movies',
        component: MoviesComponent
    },
     {
        path: '**',
        component: OopsComponent
    }
]
3.  base href=""
	<base href="/">
4.  i need to create routerlinks 
	   <li *ngFor="let menuitem of menuItems" highlighter>
                    <a secured [routerLink]='menuitem | lowercase'>{{menuitem| uppercase}}</a>
                </li>
5.  <router-outlet></router-outlet>

index.html --> AppComonent Service=> MenuBar & Login


i am going to clikc the loginButoon --> 
	//login.component.ts 
	login(){
		//visibility loginService
		loginService.login();
			emits the event
	}


i am also having menubar on the page 
	in the constructor(){

		loginService.loginBroadcaster.subscribe(()=>{

		})

	}


1. i have create a service 
2. i have subject in service on which interested party 
	can observe  
3. I inject the login Service in the App.component.ts 
4. in the child the menu and the login i used it 
5. every time i do a login --> service.login--> event 
6. but my login and my menu but subscribe to the events 
	




i need a service: 
a service needs to have a subject 
a service need to provide a way to acess and subsrie over the 
subject 

i want to also broadcast info on the subject when 
the property or any activity happens tha tneeds to sent to the other 



1. Write Service 	
2. Define Subject 
3. Did you expose the Subject Observable 
4. Did you identify locations where you wish to 
	publish the events 
	login(); 
	subject.next(); 


My Menu COmpionent  (Target): 
1. Did you inject the Service (Without a provider
2. did you create  subscriber for the subejct here 
	 loginService.broadCasterRecvr.subscriber(res=>{

	 });


3. Did you inject the service in your login Component 
	Source Event 
	when some one clicks the login(); 
	you will service.login(); 
	service.login ---> subject.next(); 

4. the last part of the puzzle is the :- 
	register the service with the parent 





index.html->
  my-app
  	myapp.component.ts 
  		Service---> 
  			---> Subject =-> 
  		main-menu--
  			menu.comoponent.ts 
  			contructors (subscribe())
  		login.component->
  			login.service

  		i click the login-->login.component.ts (login)
  								--> loginService.login();
  										--> subject.next();


















Writing Pipes :- 
why should i write pipes : 





1. Components 
2. Pipes 
3. Services 
4. Directives 
5. Interc Communication 
6. structural directives 
7. attribute based directives 
8. events 
9. models bindings 
10.Routers 
11.HTTP /Observable/Promises
12.writing complete application 
13.NgWebStore 
14.Validation 

Link you : 
1. PPT 
2. SHaring notes 
3. Sharing the complet application
4. Shared (Dummpy Api)
5. nilesh.devdas@outlook.com 
6. 9923111234 




































